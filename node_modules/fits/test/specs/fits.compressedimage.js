// Generated by CoffeeScript 1.3.3
(function() {
  var FITS, require;

  require = window.require;

  FITS = require("fits");

  describe("FITS CompImage", function() {
    it('can read a FITS compressed image', function() {
      var fits, precision, xhr;
      precision = 6;
      fits = null;
      xhr = new XMLHttpRequest();
      xhr.open('GET', 'data/CFHTLS_03_g_sci.fits.fz');
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        return fits = new FITS.File(xhr.response);
      };
      xhr.send();
      waitsFor(function() {
        return fits != null;
      });
      return runs(function() {
        var image;
        image = fits.getDataUnit();
        image.getFrame();
        image.getExtremes();
        expect(image.min).toBeCloseTo(-2.981497, precision);
        expect(image.max).toBeCloseTo(1273.853638, precision);
        expect(image.getPixel(0, 0)).toBeCloseTo(0.173962, precision);
        expect(image.getPixel(400, 0)).toBeCloseTo(0.347923, precision);
        expect(image.getPixel(400, 400)).toBeCloseTo(0.344889, precision);
        expect(image.getPixel(0, 400)).toBeCloseTo(1.20711267, precision);
        expect(image.getPixel(33, 205)).toBeCloseTo(0.975486, precision);
        expect(image.getPixel(44, 149)).toBeCloseTo(-0.774174, precision);
        expect(image.getPixel(237, 377)).toBeCloseTo(-0.668716, precision);
        return expect(image.getPixel(393, 27)).toBeCloseTo(0.490127, precision);
      });
    });
    return it('can decompress gziped data', function() {
      var fits, xhr;
      fits = null;
      xhr = new XMLHttpRequest();
      xhr.open('GET', 'data/row.fits.fz');
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        return fits = new FITS.File(xhr.response);
      };
      xhr.send();
      waitsFor(function() {
        return fits != null;
      });
      return runs(function() {
        var dataunit;
        dataunit = fits.getDataUnit();
        return dataunit.getFrame();
      });
    });
  });

}).call(this);
