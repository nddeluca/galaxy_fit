// Generated by CoffeeScript 1.3.3
(function() {
  var require;

  require = window.require;

  describe("FITS", function() {
    var FITS;
    FITS = require("fits");
    it('can open a FITS file with image and ASCII table', function() {
      var fits, xhr;
      fits = null;
      xhr = new XMLHttpRequest();
      xhr.open('GET', 'data/m101.fits');
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        return fits = new FITS.File(xhr.response);
      };
      xhr.send();
      waitsFor(function() {
        return fits != null;
      });
      return runs(function() {
        expect(fits.hdus.length).toEqual(2);
        expect(fits.eof).toBeTruthy();
        expect(fits.hdus[0].data.constructor.name).toBe("Image");
        return expect(fits.hdus[1].data.constructor.name).toBe("Table");
      });
    });
    it('can open a FITS file storing a compressed image', function() {
      var fits, xhr;
      fits = null;
      xhr = new XMLHttpRequest();
      xhr.open('GET', 'data/CFHTLS_03_g_sci.fits.fz');
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        return fits = new FITS.File(xhr.response);
      };
      xhr.send();
      waitsFor(function() {
        return fits != null;
      });
      return runs(function() {
        expect(fits.hdus.length).toEqual(2);
        expect(fits.eof).toBeTruthy();
        expect(fits.hdus[0].data).toBeUndefined();
        return expect(fits.hdus[1].data.constructor.name).toBe("CompImage");
      });
    });
    it('can open a FITS file storing a binary table', function() {
      var fits, xhr;
      fits = null;
      xhr = new XMLHttpRequest();
      xhr.open('GET', 'data/bit.fits');
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        return fits = new FITS.File(xhr.response);
      };
      xhr.send();
      waitsFor(function() {
        return fits != null;
      });
      return runs(function() {
        expect(fits.hdus.length).toEqual(2);
        expect(fits.eof).toBeTruthy();
        expect(fits.hdus[0].data).toBeUndefined();
        return expect(fits.hdus[1].data.constructor.name).toBe("BinaryTable");
      });
    });
    return it('can read a bit array', function() {
      var fits, xhr;
      fits = null;
      xhr = new XMLHttpRequest();
      xhr.open('GET', 'data/spec-0406-51869-0012.fits');
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        return fits = new FITS.File(xhr.response);
      };
      xhr.send();
      waitsFor(function() {
        return fits != null;
      });
      return runs(function() {
        return console.log(fits);
      });
    });
  });

}).call(this);
